/**
 * plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/*global tinymce:true */

tinymce.PluginManager.add('cmsimage', function(editor) {
  function getImageSize(url, callback) {
    var img = document.createElement('img');

    function done(width, height) {
      if (img.parentNode) {
        img.parentNode.removeChild(img);
      }

      callback({width: width, height: height});
    }

    img.onload = function() {
      done(Math.max(img.width, img.clientWidth), Math.max(img.height, img.clientHeight));
    };

    img.onerror = function() {
      done();
    };

    var style = img.style;
    style.visibility = 'hidden';
    style.position = 'fixed';
    style.bottom = style.left = 0;
    style.width = style.height = 'auto';

    document.body.appendChild(img);
    img.src = url;
  }

  function buildListItems(inputList, itemCallback, startItems) {
    function appendItems(values, output) {
      output = output || [];

      tinymce.each(values, function(item) {
        var menuItem = {text: item.text || item.title};

        if (item.menu) {
          menuItem.menu = appendItems(item.menu);
        } else {
          menuItem.value = item.value;
          itemCallback(menuItem);
        }

        output.push(menuItem);
      });

      return output;
    }

    return appendItems(inputList, startItems || []);
  }

  function createImageList(callback) {
    return function() {
      var imageList = editor.settings.image_list;

      if (typeof imageList == "string") {
        tinymce.util.XHR.send({
          url: imageList,
          success: function(text) {
            callback(tinymce.util.JSON.parse(text));
          }
        });
      } else if (typeof imageList == "function") {
        imageList(callback);
      } else {
        callback(imageList);
      }
    };
  }

  function showDialog(imageList) {
    var win, data = {}, dom = editor.dom, imgElm, figureElm;
    var width, height, imageDimensions = editor.settings.image_dimensions !== false;
    var mediaList = JSON.parse(MEDIA_LIST)

    function recalcSize() {
      var widthCtrl, heightCtrl, newWidth, newHeight;

      widthCtrl = win.find('#width')[0];
      heightCtrl = win.find('#height')[0];

      if (!widthCtrl || !heightCtrl) {
        return;
      }

      newWidth = widthCtrl.value();
      newHeight = heightCtrl.value();

      if (win.find('#constrain')[0].checked() && width && height && newWidth && newHeight) {
        if (width != newWidth) {
          newHeight = Math.round((newWidth / width) * newHeight);

          if (!isNaN(newHeight)) {
            heightCtrl.value(newHeight);
          }
        } else {
          newWidth = Math.round((newHeight / height) * newWidth);

          if (!isNaN(newWidth)) {
            widthCtrl.value(newWidth);
          }
        }
      }

      width = newWidth;
      height = newHeight;
    }

    function onSubmitForm() {
      var figureElm, oldImg;

      function waitLoad(imgElm) {
        function selectImage() {
          imgElm.onload = imgElm.onerror = null;

          if (editor.selection) {
            editor.selection.select(imgElm);
            editor.nodeChanged();
          }
        }

        imgElm.onload = function() {
          if (!data.width && !data.height && imageDimensions) {
            dom.setAttribs(imgElm, {
              width: imgElm.clientWidth,
              height: imgElm.clientHeight
            });
          }

          selectImage();
        };

        imgElm.onerror = selectImage;
      }

      updateStyle();
      recalcSize();

      data = tinymce.extend(data, win.toJSON());

      if (!data.alt) {
        data.alt = '';
      }

      if (!data.title) {
        data.title = '';
      }

      if (data.width === '') {
        data.width = null;
      }

      if (data.height === '') {
        data.height = null;
      }

      if (!data.style) {
        data.style = null;
      }

      // Setup new data excluding style properties
      /*eslint dot-notation: 0*/
      data = {
        src: data.src,
        alt: data.alt,
        title: data.title,
        width: data.width,
        height: data.height,
        style: data.style,
        caption: data.caption,
        "class": data["class"]
      };

      editor.undoManager.transact(function() {
        if (!data.src) {
          if (imgElm) {
            dom.remove(imgElm);
            editor.focus();
            editor.nodeChanged();
          }

          return;
        }

        if (data.title === "") {
          data.title = null;
        }

        if (!imgElm) {
          data.id = '__mcenew';
          editor.focus();
          editor.selection.setContent(dom.createHTML('img', data));
          imgElm = dom.get('__mcenew');
          dom.setAttrib(imgElm, 'id', null);
        } else {
          dom.setAttribs(imgElm, data);
        }

        editor.editorUpload.uploadImagesAuto();

        if (data.caption === false) {
          if (dom.is(imgElm.parentNode, 'figure.image')) {
            figureElm = imgElm.parentNode;
            dom.insertAfter(imgElm, figureElm);
            dom.remove(figureElm);
          }
        }

        function isTextBlock(node) {
          return editor.schema.getTextBlockElements()[node.nodeName];
        }

        if (data.caption === true) {
          if (!dom.is(imgElm.parentNode, 'figure.image')) {
            oldImg = imgElm;
            imgElm = imgElm.cloneNode(true);
            figureElm = dom.create('figure', {'class': 'image'});
            figureElm.appendChild(imgElm);
            figureElm.appendChild(dom.create('figcaption', {contentEditable: true}, 'Caption'));
            figureElm.contentEditable = false;

            var textBlock = dom.getParent(oldImg, isTextBlock);
            if (textBlock) {
              dom.split(textBlock, oldImg, figureElm);
            } else {
              dom.replace(figureElm, oldImg);
            }

            editor.selection.select(figureElm);
          }

          return;
        }

        waitLoad(imgElm);
      });
    }

    function removePixelSuffix(value) {
      if (value) {
        value = value.replace(/px$/, '');
      }

      return value;
    }

    function srcChange(e) {
      var srcURL, prependURL, absoluteURLPattern, meta = e.meta || {};

      tinymce.each(meta, function(value, key) {
        win.find('#' + key).value(value);
      });

      if (!meta.width && !meta.height) {
        srcURL = editor.convertURL(this.value(), 'src');

        // Pattern test the src url and make sure we haven't already prepended the url
        prependURL = editor.settings.image_prepend_url;
        absoluteURLPattern = new RegExp('^(?:[a-z]+:)?//', 'i');
        if (prependURL && !absoluteURLPattern.test(srcURL) && srcURL.substring(0, prependURL.length) !== prependURL) {
          srcURL = prependURL + srcURL;
        }

        this.value(srcURL);

        getImageSize(editor.documentBaseURI.toAbsolute(this.value()), function(data) {
          if (data.width && data.height && imageDimensions) {
            width = data.width;
            height = data.height;

            win.find('#width').value(width);
            win.find('#height').value(height);
          }
        });
      }
    }

    imgElm = editor.selection.getNode();
    figureElm = dom.getParent(imgElm, 'figure.image');

    if (figureElm) {
      imgElm = dom.select('img', figureElm)[0];
    }

    if (imgElm && (imgElm.nodeName != 'IMG' || imgElm.getAttribute('data-mce-object') || imgElm.getAttribute('data-mce-placeholder'))) {
      imgElm = null;
    }

    if (imgElm) {
      width = dom.getAttrib(imgElm, 'width');
      height = dom.getAttrib(imgElm, 'height');

      data = {
        src: dom.getAttrib(imgElm, 'src'),
        alt: dom.getAttrib(imgElm, 'alt'),
        title: dom.getAttrib(imgElm, 'title'),
        "class": dom.getAttrib(imgElm, 'class'),
        width: width,
        height: height,
        caption: !!figureElm
      };
    }

    function getFormItems() {
      // General settings shared between simple and advanced dialogs
      var generalFormItems = [];

      if (editor.settings.image_description !== false) {
        generalFormItems.push({
          name: 'alt',
          type: 'textbox',
          label: 'Image description'
        });
      }

      if (editor.settings.image_title) {
        generalFormItems.push({
          name: 'title',
          type: 'textbox',
          label: 'Image Title'
        });
      }

      if (imageDimensions) {
        generalFormItems.push({
          type: 'container',
          label: 'Dimensions',
          layout: 'flex',
          direction: 'row',
          align: 'center',
          spacing: 5,
          items: [
            {
              name: 'width',
              type: 'textbox',
              maxLength: 5,
              size: 3,
              onchange: recalcSize,
              ariaLabel: 'Width'
            },
            {type: 'label', text: 'x'},
            {
              name: 'height',
              type: 'textbox',
              maxLength: 5,
              size: 3,
              onchange: recalcSize,
              ariaLabel: 'Height'
            },
            {
              name: 'constrain',
              type: 'checkbox',
              checked: true,
              text: 'Constrain proportions'
            }
          ]
        });
      }

      if (editor.settings.image_caption && tinymce.Env.ceFalse) {
        generalFormItems.push({
          name: 'caption',
          type: 'checkbox',
          label: 'Caption'
        });
      }

      return generalFormItems;
    }

    function updateStyle() {
      function addPixelSuffix(value) {
        if (value.length > 0 && /^[0-9]+$/.test(value)) {
          value += 'px';
        }

        return value;
      }

      if (!editor.settings.image_advtab) {
        return;
      }

      var data = win.toJSON(),
        css = dom.parseStyle(data.style);

      win.find('#style').value(dom.serializeStyle(dom.parseStyle(dom.serializeStyle(css))));
    }

    function addRowListeners() {
      var rows = document.querySelectorAll('.tbl-MediaList_Row')

      for (var i = 0; i < rows.length; i++) {
          rows[i].addEventListener('click', rowClickHandler)
      }
    }

    function rowClickHandler() {
      // get the file data
      var data = mediaList.filter(function(item) {
        return this.getAttribute('data-index') == item.id
      }, this)

      // get any data that has been entered into the modal
      var windowData = tinymce.extend(data, window.active_tinymce_window.toJSON());

      // set the attribute data for the image
      var attrs = {
        alt:  windowData.alt || data[0].alt_text || false,
        src:  data[0].image,
        title:  data[0].title,
      }

      var imageDom = createImageElement(attrs);

      // inset into wysiwyg and close the modal
      editor.insertContent(imageDom);
      editor.windowManager.close();
    }

    function createImageElement(attrs) {
      var imageHtml = '';

         // build up the img tag html
      if (attrs.alt) {
        imageHtml += '<img ' +
          'alt="' + attrs.alt + '" ' +
          'src="' + attrs.src + '" ' +
          'title="' + attrs.title + '" ' +
          '/>';
      } else {
        imageHtml += '<img ' +
          'src="' + attrs.src + '" ' +
          'title="' + attrs.title + '" ' +
          '/>';
      }

      return imageHtml;
    }

    function createMediaListDom(mediaList) {
      // create the table header and open the body for rows
      var tableHtml = '' +
        '<table id="modalMediaList" class="tbl-MediaList">' +
          '<thead class="tbl-MediaList_Head">' +
            '<tr>' +
              '<th class="tbl-MediaListHead_Column tbl-MediaListHead_Column-center">' +
                'ID' +
              '</th>' +
              '<th class="tbl-MediaListHead_Column tbl-MediaListHead_Column-image">' +
                'Image'+
              '</th>' +
              '<th class="tbl-MediaListHead_Column">' +
                'Title'+
              '</th>' +
              '<th class="tbl-MediaListHead_Column tbl-MediaListHead_Column-center">' +
                'Size'+
              '</th>' +
            '</tr>' +
          '</thead>' +
        '</thead>' +
        '<tbody>';

      // build up the rows
      for (var i = 0; i < mediaList.length; i++) {
        var rowHtml = '' +
          '<tr class="tbl-MediaList_Row" data-index="' + mediaList[i].id + '">' +
            '<td class="tbl-MediaList_Cell tbl-MediaList_Cell-center">' +
              mediaList[i].id +
            '</td>' +
            '<td class="tbl-MediaList_Cell tbl-MediaList_Cell-image">' +
              '<div style="background-image: url(' + mediaList[i].image + ');" class="tbl-MediaListCell_Image"></div>' +
            '</td>' +
            '<td class="tbl-MediaList_Cell">' +
              mediaList[i].title +
            '</td>' +
            '<td class="tbl-MediaList_Cell tbl-MediaList_Cell-center">' +
              mediaList[i].size +
            '</td>' +
          '</tr>';

        tableHtml += rowHtml;
      }

      // don't forget the closing tags
      tableHtml += '' +
        '</tbody>' +
      '</table>';

      return tableHtml;
    }

    // Set active editor
    window.active_tinymce = editor

    // Generate the media list table HTML
    var tableDom = createMediaListDom(mediaList);

    // Advanced dialog shows general+advanced tabs
    win = editor.windowManager.open({
      title: 'Insert/edit image',
      data: data,
      bodyType: 'tabpanel',
      body: [
        {
          title: 'Media gallery',
          type: 'panel',
          minWidth: 750,
          minHeight: 500,
          spacing: 5,
          items: [
            {
              type: 'container',
              html: '<div class="media-gallery-container" style="padding: 10px; background: #FFF; height: 480px;">' +
                tableDom +
              '</div>'
            }
          ]
        },
        {
          title: 'Advanced',
          type: 'form',
          items: getFormItems()
        },
      ],
      onSubmit: onSubmitForm
    });

    window.active_tinymce_window = win

    // add click event handlers to the rows
    addRowListeners()
  }

  function initMediaLibrary() {
    console.log('go')
    showDialog()
  }

  editor.addButton('cmsimage', {
    icon: 'image',
    tooltip: 'Insert/edit image',
    onclick: createImageList(showDialog),
    stateSelector: 'img:not([data-mce-object],[data-mce-placeholder]),figure.image'
  });

  editor.addMenuItem('cmsimage', {
    icon: 'image',
    text: 'Insert/edit image',
    onclick: createImageList(showDialog),
    context: 'insert',
    prependToContext: true
  });

  editor.addCommand('mceImage', createImageList(showDialog));
});
